"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = require("react");

var _queryString = _interopRequireDefault(require("query-string"));

var _humps = _interopRequireDefault(require("humps"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function PayPalSDKWrapper(props) {
  var loading = props.loading,
      children = props.children,
      config = _objectWithoutProperties(props, ["loading", "children"]);

  var _useState = (0, _react.useState)(false),
      _useState2 = _slicedToArray(_useState, 2),
      isScriptLoaded = _useState2[0],
      setIsScriptLoaded = _useState2[1];

  function handleScriptLoaded() {
    setIsScriptLoaded(true);
  }

  function handleScriptError() {// Error loading PayPal SDK script.
  }

  function getSDKParams() {
    var clientId = config.clientId,
        disableFunding = config.disableFunding,
        disableCard = config.disableCard,
        rest = _objectWithoutProperties(config, ["clientId", "disableFunding", "disableCard"]);

    var params = _objectSpread({
      clientId: clientId || process.env.REACT_APP_PAYPAL_CLIENT_ID,
      disableFunding: disableFunding && disableFunding.join(','),
      disableCard: disableCard && disableCard.join(',')
    }, rest);

    return _humps.default.decamelizeKeys(params, {
      separator: '-'
    });
  }

  (0, _react.useEffect)(function () {
    var params = getSDKParams();
    var src = "https://www.paypal.com/sdk/js?".concat(_queryString.default.stringify(params));
    var scriptElement = document.createElement('script');
    scriptElement.src = src;
    scriptElement.addEventListener('load', handleScriptLoaded);
    scriptElement.addEventListener('error', handleScriptError);

    if (document.body) {
      document.body.appendChild(scriptElement);
    }

    return function () {
      scriptElement.removeEventListener('load', handleScriptLoaded);
      scriptElement.removeEventListener('error', handleScriptError);
    };
  }, []);

  if (!isScriptLoaded) {
    return loading || null;
  }

  return children;
}

var _default = PayPalSDKWrapper;
exports.default = _default;